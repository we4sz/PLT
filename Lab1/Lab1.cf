-- programs

Prog.		Program ::= [Def] ;

-- definitions

DFunc.		Def ::= Type Id "(" [ArgDecl] ")" Body ;
DUsing.		Def ::= "using" QConst ";" ;

separator 	Def "" ;

-- argument declarations and functions bodies

ATypVar.	ArgDecl ::= Type Id ;
separator 	ArgDecl "," ;

BStm.		Body ::= "{" [Stm] "}" ;

VarStm.		Var ::= Id ;
separator nonempty Var "," ;

terminator	Stm "" ;

-- statements

SExp.		Stm ::= Exp ";" ;
SReturn.	Stm ::= "return" Exp ";" ;
SDecl.		Stm ::= Type [Var] ";" ;
SWhile. 	Stm ::= "while" "(" Exp ")" Stm ;
SIf.		Stm ::= "if" "(" Exp ")" Stm ;
SIfElse.	Stm ::= "if" "(" Exp ")" Stm "else" Stm;
SInit.		Stm ::= Type Id "=" Stm ;
SBlock. 	Stm ::= "{" [Stm] "}" ;

STypeDef.	Stm ::= "typedef" QConst Id ";" ;

-- expressions

EInt.		Exp16 ::= Integer ;
EString.	Exp16 ::= [String] ;
EConst.		Exp15 ::= QConst ;
EFunCall.	Exp15 ::= [FName] "(" [FArg] ")" ";" ;
EPIncr. 	Exp14 ::= Exp15 "++" ;
EPDecr. 	Exp14 ::= Exp15 "--" ;
EIncr. 		Exp13 ::= "++" Exp14 ;
EDecr. 		Exp13 ::= "--" Exp14 ;
ENeg. 		Exp13 ::= "-" Exp14 ;
EMul. 		Exp12 ::= Exp12 "*" Exp13 ;
EDiv. 		Exp12 ::= Exp12 "/" Exp13 ;
EAdd. 		Exp11 ::= Exp11 "+" Exp12 ;
ESub. 		Exp11 ::= Exp11 "-" Exp12 ;
ELShift.	Exp10 ::= Exp10 "<<" Exp11 ;
ERShift.	Exp10 ::= Exp10 ">>" Exp11 ;
ELt. 		Exp9 ::= Exp9 "<" Exp10 ;
EGt. 		Exp9 ::= Exp9 ">" Exp10 ;
ELEq. 		Exp9 ::= Exp9 "<=" Exp10 ;
EGEq. 		Exp9 ::= Exp9 ">=" Exp10 ;
EEq. 		Exp8 ::= Exp8 "==" Exp9 ;
ENEq. 		Exp8 ::= Exp8 "!=" Exp9 ;
EAnd. 		Exp4 ::= Exp4 "&&" Exp5 ;
EOr. 		Exp3 ::= Exp3 "||" Exp4 ;
EAss. 		Exp2 ::= Exp3 "=" Exp2 ;
ECond.		Exp2 ::= Exp2 "?" Exp3 ":" Exp3 ;

SFName. 	FName ::= Id ;
SFArg. 		FArg ::= Exp ;
separator nonempty FName "." ;
separator FArg "," ;
separator nonempty String "" ;

coercions Exp 16 ;

-- qualified constatns

QCon.		QConst ::= [Const] ;

separator 	nonempty Const "::" ;

CId.		Const ::= Id ;
TmpInst.	Const ::= Id "<" [Type] ">" ;

-- types

TInt.		Type ::= "int" ;
TConst.		Type ::= QConst ;
TBool. 		Type ::= "bool" ;
TDouble. 	Type ::= "double" ;
TVoid. 		Type ::= "void" ;

separator nonempty Type "," ;

-- identifiers

token Id (letter (letter | digit | '_')*) ;

-- TODO comments

comment		"//" ;
comment 	"*/" "*/" ;
comment 	"#" ;